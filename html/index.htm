<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/style/vortex.css">
</head>
<body>
    <canvas id="glCanvas"></canvas>

    <div class="container">
      <h1>Animated Background: Three + Shader Planes / Teleioscope</h1>
      Lorem ipsum dolor sit amet, at labitur complectitur mei. Tota eloquentiam an sea, nostro electram mea et. Debitis accusata forensibus sed in, no omnium evertitur prodesset eam. Hendrerit torquatos deterruisset no per, eirmod equidem omnesque per ne. Vix appetere percipit cu.
      <p><button id="fullscreen-toggle">â¤¢ Toggle Fullscreen</button>
    </div>
    </div>
    
    <script id="vertexShader" type="x-shader/x-vertex">
    varying vec2 vUv;
    void main() {
        vUv = uv;
        gl_Position = vec4(position, 1.0);
    }
    </script>
    
    <script id="fragmentShader" type="x-shader/x-fragment">
    uniform vec2 iResolution;
    uniform float iTime;
    uniform float speed;
    uniform float rotation;
    uniform float colorCycleSpeed;
    uniform float colorIntensity;
    uniform bool enableTeleidoscope;
    uniform float zoom;
    uniform int teleidoscopeSides;
    uniform float teleidoscopeRotationSpeed;
    uniform int shapeType;
    
    #define TIME        iTime
    #define RESOLUTION  iResolution
    
    #define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))
    
    const float
      pi        = acos(-1.)
    , tau       = 2.*pi
    , planeDist = .5
    , furthest  = 16.
    , fadeFrom  = 8.
    ;
    
    const vec2 
      pathA = vec2(.31, .41)
    , pathB = vec2(1.0,sqrt(0.5))
    ;
    
    const vec4 
      U = vec4(0, 1, 2, 3)
      ;
      
    // License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
    vec3 aces_approx(vec3 v) {
      v = max(v, 0.0);
      v *= 0.6;
      float a = 2.51;
      float b = 0.03;
      float c = 2.43;
      float d = 0.59;
      float e = 0.14;
      return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);
    }
    
    vec3 offset(float z) {
      return vec3(pathB*sin(pathA*z), z);
    }
    
    vec3 doffset(float z) {
      return vec3(pathA*pathB*cos(pathA*z), 1.0);
    }
    
    vec3 ddoffset(float z) {
      return vec3(-pathA*pathA*pathB*sin(pathA*z), 0.0);
    }
    
    vec4 alphaBlend(vec4 back, vec4 front) {
      float w = front.w + back.w*(1.0-front.w);
      vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;
      return w > 0.0 ? vec4(xyz, w) : vec4(0.0);
    }
    
    float pmin(float a, float b, float k) {
      float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);
      return mix(b, a, h) - k*h*(1.0-h);
    }
    
    float pmax(float a, float b, float k) {
      return -pmin(-a, -b, k);
    }
    
    float pabs(float a, float k) {
      return -pmin(a, -a, k);
    }
    
    float sdCircle(vec2 p, float r) {
        return length(p) - r;
    }
    
    float sdSquare(vec2 p, float r) {
        vec2 d = abs(p) - r;
        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
    }
    
    float sdStar5(vec2 p, float r, float rf) {
        const vec2 k1 = vec2(0.809016994375, -0.587785252292);
        const vec2 k2 = vec2(-k1.x,k1.y);
        p.x = abs(p.x);
        p -= 2.0*max(dot(k1,p),0.0)*k1;
        p -= 2.0*max(dot(k2,p),0.0)*k2;
        p.x = abs(p.x);
        p.y -= r;
        vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);
        float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );
        return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
    }
    
    float sdDollarSign(vec2 p, float r) {
        p.y = abs(p.y);
        float a = smoothstep(0.7*r, 1.3*r, length(p));
        float b = smoothstep(0.5*r, 0.7*r, abs(p.x));
        float c = smoothstep(0.5*r, 0.7*r, abs(p.y - 0.2*r));
        return min(min(a, b), c) - 0.5;
    }
    
    float shapeDistance(vec2 p, float r, float sm) {
        float d;
        if (shapeType == 0) {
            d = sdSquare(p, r);
        } else if (shapeType == 1) {
            d = sdCircle(p, r);
        } else if (shapeType == 2) {
            d = sdDollarSign(p, r);
        } else {
            d = sdStar5(p, r, 0.5);
        }
        return d - sm;
    }
    
    vec3 palette(float n) {
      return 0.5+0.5*sin(vec3(0.,1.,2.)+n*colorCycleSpeed)*colorIntensity;
    }
    
    vec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, float pd, vec3 cp, vec3 off, float n) {
      float aa = 3.*pd*distance(pp.xy, npp.xy);
      vec4 col = vec4(0.);
      vec2 p2 = pp.xy;
      p2 -= offset(pp.z).xy;
      vec2 doff   = ddoffset(pp.z).xz;
      vec2 ddoff  = doffset(pp.z).xz;
      float dd = dot(doff, ddoff);
      p2 *= ROT(dd*pi*5.*rotation);
    
      float d0 = shapeDistance(p2, 0.45, 0.02);
      float d1 = d0-0.01;
      float d2 = length(p2);
      const float colp = pi*100.;
      float colaa = aa*200.;
      
      col.xyz = palette(0.5*n+2.*d2)*mix(0.5/(d2*d2), 1., smoothstep(-0.5+colaa, 0.5+colaa, sin(d2*colp)))/max(3.*d2*d2, 1E-1);
      col.xyz = mix(col.xyz, vec3(2.), smoothstep(aa, -aa, d1)); 
      col.w = smoothstep(aa, -aa, -d0);
      return col;
    }
    
    vec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {
      float lp = length(p);
      vec2 np = p + 1./RESOLUTION.xy;
      float rdd = 2.0-0.25;
      
      vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);
      vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);
    
      float nz = floor(ro.z / planeDist);
    
      vec4 acol = vec4(0.0);
    
      vec3 aro = ro;
      float apd = 0.0;
    
      for (float i = 1.; i <= furthest; ++i) {
        if ( acol.w > 0.95) {
          break;
        }
        float pz = planeDist*nz + planeDist*i;
    
        float lpd = (pz - aro.z)/rd.z;
        float npd = (pz - aro.z)/nrd.z;
        float cpd = (pz - aro.z)/ww.z;
    
        {
          vec3 pp = aro + rd*lpd;
          vec3 npp= aro + nrd*npd;
          vec3 cp = aro+ww*cpd;
    
          apd += lpd;
    
          vec3 off = offset(pp.z);
    
          float dz = pp.z-ro.z;
          float fadeIn = smoothstep(planeDist*furthest, planeDist*fadeFrom, dz);
          float fadeOut = smoothstep(0., planeDist*.1, dz);
          float fadeOutRI = smoothstep(0., planeDist*1.0, dz);
    
          float ri = mix(1.0, 0.9, fadeOutRI*fadeIn);
    
          vec4 pcol = plane(ro, rd, pp, npp, apd, cp, off, nz+i);
    
          pcol.w *= fadeOut*fadeIn;
          acol = alphaBlend(pcol, acol);
          aro = pp;
        }
      }
    
      return acol.xyz*acol.w;
    }
    
    vec2 kale(vec2 uv, int sides, float rotationOffset) {
        float a = atan(uv.y, uv.x) + rotationOffset;
        float r = length(uv);
        float pi = 3.14159;
        float angle = 2.0*pi/float(sides);
        a = mod(a, angle);
        a = abs(a - angle/2.0);
        return vec2(cos(a), sin(a)) * r;
    }
    
    void main() {
        vec2 r = RESOLUTION.xy, q = gl_FragCoord.xy/r, pp = -1.0+2.0*q, p = pp;
        p.x *= r.x/r.y;
        
        if (enableTeleidoscope) {
            p *= zoom;
            float rotationOffset = teleidoscopeRotationSpeed * TIME;
            p = kale(p, teleidoscopeSides, rotationOffset);
        }
    
        float tm  = planeDist*TIME*speed;
    
        vec3 ro   = offset(tm);
        vec3 dro  = doffset(tm);
        vec3 ddro = ddoffset(tm);
    
        vec3 ww = normalize(dro);
        vec3 uu = normalize(cross(U.xyx+ddro, ww));
        vec3 vv = cross(ww, uu);
        
        vec3 col = color(ww, uu, vv, ro, p);
        col = aces_approx(col);
        col = sqrt(col);
        gl_FragColor = vec4(col, 1);
    }
    </script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
    <script src="/javascript/Vortex.js"></script>
    
</body>
</html>